[gd_scene load_steps=6 format=3 uid="uid://c6x3w78dh2e2n"]

[ext_resource type="Script" path="res://scripts/game_manager.gd" id="1_ko4jb"]
[ext_resource type="Texture2D" uid="uid://brhvpr15k0nvv" path="res://assets/newtile_sheet.png" id="3_lufse"]

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_iow1l"]
texture = ExtResource("3_lufse")
margins = Vector2i(1, 1)
separation = Vector2i(2, 0)
0:0/0 = 0
1:0/0 = 0
2:0/0 = 0
3:0/0 = 0
4:0/0 = 0

[sub_resource type="TileSet" id="TileSet_2umof"]
uv_clipping = true
sources/0 = SubResource("TileSetAtlasSource_iow1l")

[sub_resource type="GDScript" id="GDScript_bavcw"]
script/source = "extends TileMap

# Define the S-shape Tetris piece
const S_SHAPE = [
	Vector2i(0, 0), Vector2i(1, 0),
	Vector2i(-1, 1), Vector2i(0, 1)
]

const I_SHAPE = [
	Vector2i(-1,0), Vector2i(0,0),
	Vector2i(1,0), Vector2i(2,0) 
]

const L_Shape = [
	Vector2i(-1,0), Vector2i(0,0),
	Vector2i(1,0), Vector2i(1,1) 
]

const J_Shape = [
	Vector2i(-1,0), Vector2i(0,0),
	Vector2i(1,0), Vector2i(1,1) 
]

const T_Shape = [
	Vector2i(-1,0), Vector2i(0,0), 
	Vector2i(1,0), Vector2i(0,1)
]

const O_SHAPE = [
	Vector2i(0,0), Vector2i(1,0), 
	Vector2i(0,1), Vector2i(1,1)
]

const Z_SHAPE = [
	Vector2i(-1,0), Vector2i(0,0), 
	Vector2i(0,1), Vector2i(1,1)
]

const ALL_SHAPES = [S_SHAPE, I_SHAPE, L_Shape, J_Shape, T_Shape, O_SHAPE, Z_SHAPE]
# Tile IDs
const EMPTY_TILE = Vector2i(4, 0)
const GHOST_TILE = Vector2i(0, 0)
const GHOST_TILE_OPPONENT = Vector2i(2, 0)
const INVALID_GHOST_TILE = Vector2i(2, 0) 

# Layer IDs
const BOARD_LAYER = 0
const GHOST_LAYER = 1


enum Player { PLAYER_1, PLAYER_2 }
enum GameState { MENU, PLAYING, GAME_OVER }

# Tile IDs for each player
const PLAYER_1_TILE = Vector2i(0, 0)
const PLAYER_2_TILE = Vector2i(2, 0)  # Red tile

var current_ghost_position = Vector2i(0, 0)
var active_piece = []
var grab_bag = []

signal piece_placed

func _ready():
	set_process_unhandled_input(true)
	print_debug(\"TileMap initialized. Ready to process input.\")
	refill_grab_bag()
	active_piece = get_next_piece()
	
	if get_layers_count() < 2:
		add_layer(GHOST_LAYER)

func reset():
	print_debug(\"Resetting the game board\")

	# Clear both layers of the TileMap
	var board_size = get_used_rect().size
	for x in range(board_size.x):
		for y in range(board_size.y):
			var cell_pos = Vector2i(x, y)
			var cell_atlas_coords = get_cell_atlas_coords(BOARD_LAYER, cell_pos)
			if cell_atlas_coords != EMPTY_TILE:
				set_cell(BOARD_LAYER, cell_pos, 0, EMPTY_TILE)

	clear_layer(GHOST_LAYER)

	# Reset game-specific variables
	current_ghost_position = Vector2i(0, 0)
	active_piece = []
	grab_bag = []

	# Refill the grab bag and get a new active piece
	refill_grab_bag()
	active_piece = get_next_piece()

	# Ensure there are at least two layers (BOARD_LAYER and GHOST_LAYER)
	if get_layers_count() < 2:
		add_layer(GHOST_LAYER)

	# Update the ghost piece to reflect the new active piece
	update_ghost_piece()

	print_debug(\"Game board reset complete\")


func _input(event):
	if not event is InputEventMouseButton or not event.pressed or get_parent().game_state != GameState.PLAYING:
		return
	
	print_debug(\"Input event detected: \", event.button_index)
	_on_tile_clicked(event.position, event.button_index)

func _process(delta):
	if Input.is_action_just_pressed(\"rotate_clockwise\"):
		rotate_piece(1)
	elif Input.is_action_just_pressed(\"rotate_counterclockwise\"):
		rotate_piece(-1)

func _unhandled_input(event):
	if event is InputEventMouseMotion and  get_parent().game_state == GameState.PLAYING:
		update_ghost_piece()

func _on_tile_clicked(click_position: Vector2, button_index: int):
	var base_position = local_to_map(to_local(click_position))
	print_debug(\"Clicked tile position: \", base_position)
	
	match button_index:
		MOUSE_BUTTON_LEFT:
			print_debug(\"Left click detected, placing piece\")
			var player_tile = PLAYER_1_TILE if   get_parent().current_player == Player.PLAYER_1 else PLAYER_2_TILE
			place_piece(base_position, player_tile)
		MOUSE_BUTTON_RIGHT:
			print_debug(\"Right click detected, clearing connected piece\")
			clear_connected_piece(base_position)

func place_piece(base_position: Vector2i, tile: Vector2i):
	print_debug(\"Placing piece at base position: \", base_position)
	var game_manager = get_parent()
	
	if game_manager.turn_count < 2 or can_place_piece(base_position, tile):
		for offset in active_piece:
			var tile_position = base_position + offset
			set_cell(BOARD_LAYER, tile_position, 0, tile)
		active_piece = get_next_piece()
		update_ghost_piece()
		emit_signal(\"piece_placed\")
	else:
		print_debug(\"Invalid placement\")

#func update_turn_display():
	## Update UI to show current player and turn count
	## You'll need to implement this based on your UI setup
	#print_debug(\"Turn \" + str(turn_count) + \" - Player \" + str(current_player + 1) + \"'s turn\")
func can_place_piece(base_position: Vector2i, tile: Vector2i) -> bool:
	var overlaps_own_color = false
	for offset in active_piece:
		var tile_position = base_position + offset
		var existing_tile = get_cell_atlas_coords(BOARD_LAYER, tile_position)
		if existing_tile == tile:
			overlaps_own_color = true
			break
		elif existing_tile != EMPTY_TILE:
			return false  
	return overlaps_own_color


func clear_connected_piece(start_position: Vector2i):
	print_debug(\"Starting to clear connected piece from position: \", start_position)
	var start_tile = get_cell_atlas_coords(BOARD_LAYER, start_position)
	print_debug(\"Start tile atlas coords: \", start_tile)
	if start_tile == EMPTY_TILE:
		print_debug(\"Start tile is empty, returning\")
		return
	
	var to_clear = [start_position]
	var checked = {}
	
	while not to_clear.is_empty():
		var current_position = to_clear.pop_back()
		print_debug(\"Checking tile at position: \", current_position)
		if current_position in checked:
			print_debug(\"Tile already checked, skipping\")
			continue
		
		checked[current_position] = true
		var current_tile = get_cell_atlas_coords(BOARD_LAYER, current_position)
		print_debug(\"Current tile atlas coords: \", current_tile)
		if current_tile == start_tile:
			print_debug(\"Clearing tile at position: \", current_position)
			set_cell(BOARD_LAYER, current_position, 0, EMPTY_TILE)
			for direction in [Vector2i.UP, Vector2i.DOWN, Vector2i.LEFT, Vector2i.RIGHT]:
				var next_position = current_position + direction
				if next_position not in checked:
					to_clear.append(next_position)
					print_debug(\"Added adjacent tile to check: \", next_position)
		
		# print_debug(\"Finished clearing connected piece\")
		# print_debug(\"Updating ghost pieces after clearing\")
		update_ghost_piece()

func update_ghost_piece():
	# print_debug(\"Updating ghost piece\")
	var mouse_position = get_global_mouse_position()
	var base_position = local_to_map(to_local(mouse_position))
	
	if base_position != current_ghost_position:
		# print_debug(\"Ghost position changed from \", current_ghost_position, \" to \", base_position)
		current_ghost_position = base_position
	
	clear_layer(GHOST_LAYER)
	
	var game_manager = get_parent()
	var current_player_tile = PLAYER_1_TILE if game_manager.current_player == game_manager.Player.PLAYER_1 else PLAYER_2_TILE
	var ghost_tile = GHOST_TILE if game_manager.current_player == game_manager.Player.PLAYER_1 else GHOST_TILE_OPPONENT

	var can_place = game_manager.turn_count < 2 or can_place_piece(current_ghost_position, current_player_tile)
	ghost_tile = ghost_tile if can_place else INVALID_GHOST_TILE

	for offset in active_piece:
		var tile_position = current_ghost_position + offset
		if get_cell_atlas_coords(BOARD_LAYER, tile_position) == EMPTY_TILE:
			set_cell(GHOST_LAYER, tile_position, 0, ghost_tile)

func rotate_piece(direction: int):
	if can_rotate():
		# Create a rotation matrix for 90 degrees rotation (clockwise or counterclockwise)
		var rotation_matrix = Transform2D().rotated(direction * PI/2)
		var new_piece = []
		# Rotate each block of the active piece
		for block in active_piece:
			# Apply rotation matrix to the block
			var rotated_position = rotation_matrix * Vector2(block)
			# Round and store the rotated position
			new_piece.append(Vector2i(round(rotated_position.x), round(rotated_position.y)))
		
		# Calculate offset to keep the rotated piece in the same general area
		var min_x = active_piece[0].x
		var min_y = active_piece[0].y
		var rotated_min_x = new_piece[0].x
		var rotated_min_y = new_piece[0].y
		
		for block in active_piece:
			min_x = min(min_x, block.x)
			min_y = min(min_y, block.y)
		
		for block in new_piece:
			rotated_min_x = min(rotated_min_x, block.x)
			rotated_min_y = min(rotated_min_y, block.y)

		# Calculate the offset
		var offset = Vector2i(min_x - rotated_min_x, min_y - rotated_min_y)

		# Apply the offset to each block of the new piece
		active_piece = new_piece.map(func(block): return block + offset)
		update_ghost_piece()

func can_rotate():
	# Implement rotation validity check here
	return true
	
func refill_grab_bag():
	grab_bag = ALL_SHAPES.duplicate()
	grab_bag.shuffle()

func get_next_piece():
	if grab_bag.is_empty():
		refill_grab_bag()
	return grab_bag.pop_back()
"

[node name="GameManager" type="Node2D"]
script = ExtResource("1_ko4jb")

[node name="TileMap" type="TileMap" parent="."]
tile_set = SubResource("TileSet_2umof")
format = 2
layer_0/tile_data = PackedInt32Array(0, 262145, 0, 65536, 262145, 0, 131072, 262145, 0, 196608, 262145, 0, 262144, 262145, 0, 327680, 262145, 0, 393216, 262145, 0, 458752, 262145, 0, 524288, 262145, 0, 589824, 262145, 0, 1, 262145, 0, 65537, 262145, 0, 131073, 262145, 0, 196609, 262145, 0, 262145, 262145, 0, 327681, 262145, 0, 393217, 262145, 0, 458753, 262145, 0, 524289, 262145, 0, 589825, 262145, 0, 2, 262145, 0, 65538, 262145, 0, 131074, 262145, 0, 196610, 262145, 0, 262146, 262145, 0, 327682, 262145, 0, 393218, 262145, 0, 458754, 262145, 0, 524290, 262145, 0, 589826, 262145, 0, 3, 262145, 0, 65539, 262145, 0, 131075, 262145, 0, 196611, 262145, 0, 262147, 262145, 0, 327683, 262145, 0, 393219, 262145, 0, 458755, 262145, 0, 524291, 262145, 0, 589827, 262145, 0, 4, 262145, 0, 65540, 262145, 0, 131076, 262145, 0, 196612, 262145, 0, 262148, 262145, 0, 327684, 262145, 0, 393220, 262145, 0, 458756, 262145, 0, 524292, 262145, 0, 589828, 262145, 0, 5, 262145, 0, 65541, 262145, 0, 131077, 262145, 0, 196613, 262145, 0, 262149, 262145, 0, 327685, 262145, 0, 393221, 262145, 0, 458757, 262145, 0, 524293, 262145, 0, 589829, 262145, 0, 6, 262145, 0, 65542, 262145, 0, 131078, 262145, 0, 196614, 262145, 0, 262150, 262145, 0, 327686, 262145, 0, 393222, 262145, 0, 458758, 262145, 0, 524294, 262145, 0, 589830, 262145, 0, 7, 262145, 0, 65543, 262145, 0, 131079, 262145, 0, 196615, 262145, 0, 262151, 262145, 0, 327687, 262145, 0, 393223, 262145, 0, 458759, 262145, 0, 524295, 262145, 0, 589831, 262145, 0, 8, 262145, 0, 65544, 262145, 0, 131080, 262145, 0, 196616, 262145, 0, 262152, 262145, 0, 327688, 262145, 0, 393224, 262145, 0, 458760, 262145, 0, 524296, 262145, 0, 589832, 262145, 0, 9, 262145, 0, 65545, 262145, 0, 131081, 262145, 0, 196617, 262145, 0, 262153, 262145, 0, 327689, 262145, 0, 393225, 262145, 0, 458761, 262145, 0, 524297, 262145, 0, 589833, 262145, 0, 10, 262145, 0, 65546, 262145, 0, 131082, 262145, 0, 196618, 262145, 0, 262154, 262145, 0, 327690, 262145, 0, 393226, 262145, 0, 458762, 262145, 0, 524298, 262145, 0, 589834, 262145, 0, 11, 262145, 0, 65547, 262145, 0, 131083, 262145, 0, 196619, 262145, 0, 262155, 262145, 0, 327691, 262145, 0, 393227, 262145, 0, 458763, 262145, 0, 524299, 262145, 0, 589835, 262145, 0, 12, 262145, 0, 65548, 262145, 0, 131084, 262145, 0, 196620, 262145, 0, 262156, 262145, 0, 327692, 262145, 0, 393228, 262145, 0, 458764, 262145, 0, 524300, 262145, 0, 589836, 262145, 0, 13, 262145, 0, 65549, 262145, 0, 131085, 262145, 0, 196621, 262145, 0, 262157, 262145, 0, 327693, 262145, 0, 393229, 262145, 0, 458765, 262145, 0, 524301, 262145, 0, 589837, 262145, 0, 14, 262145, 0, 65550, 262145, 0, 131086, 262145, 0, 196622, 262145, 0, 262158, 262145, 0, 327694, 262145, 0, 393230, 262145, 0, 458766, 262145, 0, 524302, 262145, 0, 589838, 262145, 0, 15, 262145, 0, 65551, 262145, 0, 131087, 262145, 0, 196623, 262145, 0, 262159, 262145, 0, 327695, 262145, 0, 393231, 262145, 0, 458767, 262145, 0, 524303, 262145, 0, 589839, 262145, 0, 16, 262145, 0, 65552, 262145, 0, 131088, 262145, 0, 196624, 262145, 0, 262160, 262145, 0, 327696, 262145, 0, 393232, 262145, 0, 458768, 262145, 0, 524304, 262145, 0, 589840, 262145, 0, 17, 262145, 0, 65553, 262145, 0, 131089, 262145, 0, 196625, 262145, 0, 262161, 262145, 0, 327697, 262145, 0, 393233, 262145, 0, 458769, 262145, 0, 524305, 262145, 0, 589841, 262145, 0)
script = SubResource("GDScript_bavcw")
